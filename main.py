import os
import math
import asyncio
import logging
import re
from typing import Final, Dict, Any, Optional

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Update, Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import aiohttp

# ================== CONFIG ==================
BOT_TOKEN: Final[str] = os.getenv("BOT_TOKEN", "")
APP_BASE_URL: Final[str] = os.getenv("APP_BASE_URL", "").rstrip("/")
WEBHOOK_SECRET: Final[str] = os.getenv("WEBHOOK_SECRET", "")

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "7039409310") or 7039409310)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ================== LOGGING ==================
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger("tgbot")

# ================== AIOGRAM CORE ==================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================== CONSTANTS ==================
TARIFFS = {
    "econom":  {"title": "–õ–µ–≥–∫–æ–≤–æ–π", "per_km": 30},
    "camry":   {"title": "Camry",    "per_km": 40},
    "minivan": {"title": "–ú–∏–Ω–∏–≤—ç–Ω",  "per_km": 50},
}

# ================== KEYBOARDS ==================
def start_big_button_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")]],
        resize_keyboard=True,
        is_persistent=True,
    )

def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚òéÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä")],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def dispatcher_inline_kb() -> InlineKeyboardMarkup:
    # –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö Telegram –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞–±–æ—Ä –Ω–æ–º–µ—Ä–∞ –ø–æ tel:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É", url="tel:+79340241414")
    ]])

def confirm_order_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="order_confirm"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="order_edit"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel"),
    ]])

# ================== STATES ==================
class CalcStates(StatesGroup):
    from_city = State()
    to_city = State()

class OrderStates(StatesGroup):
    from_city = State()
    to_city = State()
    date = State()
    time = State()
    phone = State()
    comment = State()
    confirm = State()

# ================== HELPERS ==================
def haversine_km(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    R = 6371.0
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlmb = math.radians(lon2 - lon1)
    a = math.sin(dphi/2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlmb/2) ** 2
    return R * (2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)))

async def geocode_city(session: aiohttp.ClientSession, city: str) -> Optional[Dict[str, float]]:
    # Nominatim —Ç—Ä–µ–±—É–µ—Ç User-Agent
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": city,
        "format": "json",
        "limit": 1,
    }
    headers = {"User-Agent": "TransferAir-KMV-TelegramBot/1.0 (contact: admin@example.com)"}
    try:
        async with session.get(url, params=params, headers=headers, timeout=20) as r:
            if r.status != 200:
                return None
            data = await r.json()
            if not data:
                return None
            lat = float(data[0]["lat"]); lon = float(data[0]["lon"])
            return {"lat": lat, "lon": lon}
    except Exception as e:
        logger.warning("Geocode failed for %s: %s", city, e)
        return None

def format_prices_km(distance_km: float) -> str:
    d = round(distance_km, 1)
    p_e = int(round(d * TARIFFS["econom"]["per_km"]))
    p_c = int(round(d * TARIFFS["camry"]["per_km"]))
    p_m = int(round(d * TARIFFS["minivan"]["per_km"]))
    return (
        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~{d} –∫–º\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"‚Ä¢ –õ–µ–≥–∫–æ–≤–æ–π ‚Äî ~{p_e} ‚ÇΩ (30 ‚ÇΩ/–∫–º)\n"
        f"‚Ä¢ Camry ‚Äî ~{p_c} ‚ÇΩ (40 ‚ÇΩ/–∫–º)\n"
        f"‚Ä¢ –ú–∏–Ω–∏–≤—ç–Ω ‚Äî ~{p_m} ‚ÇΩ (50 ‚ÇΩ/–∫–º)"
    )

def normalize_city(text: str) -> str:
    return " ".join(text.strip().split())

PHONE_RE = re.compile(r"^\+?\d[\d\-\s]{8,}$")

# ================== HANDLERS ==================
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    # "—Ü–µ–Ω—Ç—Ä" –≤ Telegram –Ω–µ–ª—å–∑—è –∑–∞–¥–∞—Ç—å, —Å–¥–µ–ª–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    text = (
        " \n"
        " \n"
        "*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!*\n"
        "–≠—Ç–æ –±–æ—Ç –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–µ–≥–æ —Ç–∞–∫—Å–∏\n"
        "*TransferAir –ö–∞–≤–∫–∞–∑—Å–∫–∏–µ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã*.\n"
        " \n"
        "–ù–∞–∂–º–∏—Ç–µ *–°—Ç–∞—Ä—Ç*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=start_big_button_kb())

@dp.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
async def on_big_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

# ---- –î–ò–°–ü–ï–¢–ß–ï–† ----
@dp.message(F.text == "‚òéÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä")
async def on_dispatcher(message: Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º: +7 934 024-14-14",
                         reply_markup=main_menu_kb())
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å:",
                         reply_markup=None)
    await bot.send_message(message.chat.id, "‚òéÔ∏è", reply_markup=dispatcher_inline_kb())

# ---- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ----
@dp.message(F.text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def calc_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(CalcStates.from_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è*:", parse_mode="Markdown", reply_markup=main_menu_kb())

@dp.message(CalcStates.from_city, F.text)
async def calc_from_city(message: Message, state: FSMContext):
    city = normalize_city(message.text)
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(from_city=city)
    await state.set_state(CalcStates.to_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è*:", parse_mode="Markdown")

@dp.message(CalcStates.to_city, F.text)
async def calc_to_city(message: Message, state: FSMContext):
    to_city = normalize_city(message.text)
    data = await state.get_data()
    from_city = data.get("from_city")

    # –≥–µ–æ–∫–æ–¥–∏–º –æ–±–µ —Ç–æ—á–∫–∏ –∏ —Å—á–∏—Ç–∞–µ–º –∫–º
    async with aiohttp.ClientSession() as session:
        a = await geocode_city(session, from_city)
        b = await geocode_city(session, to_city)

    if not a or not b:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "
            "`–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫`, `–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å`, `–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã`).",
            parse_mode="Markdown"
        )
        return

    dist = haversine_km(a["lat"], a["lon"], b["lat"], b["lon"])
    # –æ—á–µ–Ω—å –≥—Ä—É–±–æ, –Ω–æ –¥–ª—è –º–µ–∂–≥–æ—Ä–æ–¥–∞ –æ–∫; –º–∏–Ω–∏–º—É–º 1 –∫–º
    dist = max(dist, 1.0)

    txt = (
        f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n"
        f"–ò–∑: *{from_city}*\n"
        f"–í: *{to_city}*\n\n"
        f"{format_prices_km(dist)}"
    )
    await message.answer(txt, parse_mode="Markdown", reply_markup=main_menu_kb())
    await state.clear()

# ---- –°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó ----
@dp.message(F.text == "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def order_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(OrderStates.from_city)
    await state.update_data(order={})
    await message.answer("–ì–æ—Ä–æ–¥ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è*:", parse_mode="Markdown")

@dp.message(OrderStates.from_city, F.text)
async def order_from_city(message: Message, state: FSMContext):
    city = normalize_city(message.text)
    if not city:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["from_city"] = city
    await state.update_data(order=order)
    await state.set_state(OrderStates.to_city)
    await message.answer("–ì–æ—Ä–æ–¥ *–ø—Ä–∏–±—ã—Ç–∏—è*:", parse_mode="Markdown")

@dp.message(OrderStates.to_city, F.text)
async def order_to_city(message: Message, state: FSMContext):
    city = normalize_city(message.text)
    if not city:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["to_city"] = city
    await state.update_data(order=order)
    await state.set_state(OrderStates.date)
    await message.answer("–î–∞—Ç–∞ *–ø–æ–¥–∞—á–∏* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.10.2025):", parse_mode="Markdown")

@dp.message(OrderStates.date, F.text)
async def order_date(message: Message, state: FSMContext):
    date_text = normalize_city(message.text)
    if not date_text:
        await message.answer("–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞. –ü—Ä–∏–º–µ—Ä: 31.10.2025")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["date"] = date_text
    await state.update_data(order=order)
    await state.set_state(OrderStates.time)
    await message.answer("–í—Ä–µ–º—è *–ø–æ–¥–∞—á–∏* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", parse_mode="Markdown")

@dp.message(OrderStates.time, F.text)
async def order_time(message: Message, state: FSMContext):
    time_text = normalize_city(message.text)
    if not time_text:
        await message.answer("–í—Ä–µ–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä: 14:30")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["time"] = time_text
    await state.update_data(order=order)
    await state.set_state(OrderStates.phone)
    await message.answer("–ù–æ–º–µ—Ä *—Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):", parse_mode="Markdown")

@dp.message(OrderStates.phone, F.text)
async def order_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_RE.match(phone):
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67)")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["phone"] = phone
    await state.update_data(order=order)
    await state.set_state(OrderStates.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª.", parse_mode="Markdown")

@dp.message(OrderStates.comment, F.text)
async def order_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    data = await state.get_data(); order = data.get("order", {})
    order["comment"] = comment

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    txt = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: *{order['from_city']}*\n"
        f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: *{order['to_city']}*\n"
        f"–î–∞—Ç–∞: *{order['date']}*\n"
        f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: *{order['time']}*\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: *{order['phone']}*\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment'] or '‚Äî'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    )
    await state.set_state(OrderStates.confirm)
    await message.answer(txt, parse_mode="Markdown", reply_markup=confirm_order_kb())

@dp.callback_query(F.data.in_(["order_confirm", "order_edit", "order_cancel"]))
async def order_finish(cb: CallbackQuery, state: FSMContext):
    action = cb.data
    if action == "order_cancel":
        await state.clear()
        await cb.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await cb.answer()
        await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return

    if action == "order_edit":
        # –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        await state.clear()
        await cb.message.edit_text("–ò–∑–º–µ–Ω–∏–º –∑–∞–∫–∞–∑. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        await bot.send_message(cb.message.chat.id, "–ì–æ—Ä–æ–¥ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è*:", parse_mode="Markdown")
        await state.set_state(OrderStates.from_city)
        await cb.answer()
        return

    # confirm
    data = await state.get_data()
    order = data.get("order", {})
    await state.clear()

    await cb.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä.")
    await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        try:
            user = cb.from_user
            header = f"üë§ {user.full_name} (id={user.id})"
            if user.username:
                header += f" ‚Äî @{user.username}"
            txt = (
                f"{header}\n\n"
                "üÜï *–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑*\n"
                f"–û—Ç–∫—É–¥–∞: *{order.get('from_city','')}*\n"
                f"–ö—É–¥–∞: *{order.get('to_city','')}*\n"
                f"–î–∞—Ç–∞: *{order.get('date','')}*\n"
                f"–í—Ä–µ–º—è: *{order.get('time','')}*\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: *{order.get('phone','')}*\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment') or '‚Äî'}"
            )
            await bot.send_message(ADMIN_CHAT_ID, txt, parse_mode="Markdown")
        except Exception as e:
            logger.warning("Failed to notify admin: %s", e)

# ================== FASTAPI + WEBHOOK ==================
app = FastAPI()

@app.get("/")
async def healthcheck():
    return {"status": "ok"}

@app.post(f"/webhook/{{secret}}")
async def telegram_webhook(secret: str, request: Request):
    if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

async def _set_webhook_with_retry():
    if not APP_BASE_URL:
        logger.warning("APP_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    url = f"{APP_BASE_URL}/webhook/{WEBHOOK_SECRET or ''}".rstrip("/")
    while True:
        try:
            await bot.set_my_commands([
                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
            ])
            await bot.set_webhook(
                url=url,
                secret_token=WEBHOOK_SECRET if WEBHOOK_SECRET else None,
                drop_pending_updates=True,
            )
            logger.info("Webhook set to %s", url)
            break
        except Exception as e:
            logger.warning("Webhook not set yet (%s). Retrying soon‚Ä¶", e)
            await asyncio.sleep(30)

@app.on_event("startup")
async def on_startup():
    asyncio.create_task(_set_webhook_with_retry())
    logger.info("Startup complete. HTTP server is up; waiting for webhook setup‚Ä¶")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook(drop_pending_updates=False)
        logger.info("Webhook removed")
    except Exception as e:
        logger.warning("Failed to delete webhook: %s", e)
