import os
import math
import asyncio
import logging
from typing import Final, Dict, Any

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Update, Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ================== CONFIG ==================
BOT_TOKEN: Final[str] = os.getenv("BOT_TOKEN", "")
APP_BASE_URL: Final[str] = os.getenv("APP_BASE_URL", "").rstrip("/")
WEBHOOK_SECRET: Final[str] = os.getenv("WEBHOOK_SECRET", "")

# —Ç–≤–æ–π –∞–¥–º–∏–Ω-ID:
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "7039409310") or 7039409310)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ================== LOGGING ==================
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger("tgbot")

# ================== AIOGRAM CORE ==================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================== FSM STATES ==================
class OrderStates(StatesGroup):
    waiting_from = State()
    waiting_to = State()
    waiting_distance_km = State()
    choose_tariff = State()
    confirm = State()

# ================== TARIFFS (‚ÇΩ/–∫–º) ==================
TARIFFS = {
    "econom":  {"title": "–õ–µ–≥–∫–æ–≤–æ–π", "per_km": 30},
    "camry":   {"title": "Camry",    "per_km": 40},
    "minivan": {"title": "–ú–∏–Ω–∏–≤—ç–Ω",  "per_km": 50},
}

# ================== KEYBOARDS ==================
def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton(text="‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        ],
        resize_keyboard=True,
    )

def share_location_kb(prompt_text: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=prompt_text, request_location=True)],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def back_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True,
    )

def tariffs_inline_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–õ–µ–≥–∫–æ–≤–æ–π (30 ‚ÇΩ/–∫–º)", callback_data="tariff:econom")],
        [InlineKeyboardButton(text="Camry (40 ‚ÇΩ/–∫–º)",    callback_data="tariff:camry")],
        [InlineKeyboardButton(text="–ú–∏–Ω–∏–≤—ç–Ω (50 ‚ÇΩ/–∫–º)",  callback_data="tariff:minivan")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å",        callback_data="cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_inline_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",    callback_data="confirm:no"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== HELPERS ==================
def haversine_km(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    R = 6371.0
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlmb = math.radians(lon2 - lon1)
    a = math.sin(dphi/2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlmb/2) ** 2
    return R * (2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)))

def estimate_price(distance_km: float, tariff_key: str) -> Dict[str, Any]:
    per_km = TARIFFS[tariff_key]["per_km"]
    price = int(round(max(distance_km, 0) * per_km))
    return {"distance_km": round(distance_km, 2), "price": price}

def fmt_order_summary(data: dict) -> str:
    parts = []
    parts.append("üöï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*")
    parts.append(f"–¢–∞—Ä–∏—Ñ: *{TARIFFS[data['tariff']]['title']}*")
    parts.append(f"–û—Ç–∫—É–¥–∞: {data.get('from_text', '‚Äî')}")
    parts.append(f"–ö—É–¥–∞: {data.get('to_text', '‚Äî')}")
    if "from_geo" in data and "to_geo" in data:
        fgeo = data["from_geo"]; tgeo = data["to_geo"]
        parts.append(f"–ì–µ–æ –æ—Ç–∫—É–¥–∞: {fgeo['lat']:.5f},{fgeo['lon']:.5f}")
        parts.append(f"–ì–µ–æ –∫—É–¥–∞: {tgeo['lat']:.5f},{tgeo['lon']:.5f}")
    if "calc" in data:
        c = data["calc"]
        parts.append(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~{c['distance_km']} –∫–º")
        parts.append(f"–¶–µ–Ω–∞: *~{c['price']} ‚ÇΩ*")
    return "\n".join(parts)

# ================== HANDLERS ==================
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ üöï\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb(),
    )

@dp.message(F.text == "‚ÑπÔ∏è –¢–∞—Ä–∏—Ñ—ã")
async def on_tariffs(message: Message):
    text = (
        "–¢–∞—Ä–∏—Ñ—ã:\n"
        "‚Ä¢ –õ–µ–≥–∫–æ–≤–æ–π ‚Äî 30 ‚ÇΩ/–∫–º\n"
        "‚Ä¢ Camry ‚Äî 40 ‚ÇΩ/–∫–º\n"
        "‚Ä¢ –ú–∏–Ω–∏–≤—ç–Ω ‚Äî 50 ‚ÇΩ/–∫–º\n\n"
        "–¶–µ–Ω–∞ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã √ó —Ü–µ–Ω–∞ –∑–∞ –∫–º."
    )
    await message.answer(text, reply_markup=main_menu_kb())

@dp.message(F.text == "‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def on_support(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support (–ø—Ä–∏–º–µ—Ä)", reply_markup=main_menu_kb())

@dp.message(F.text == "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(OrderStates.waiting_from)
    await state.update_data(order={})
    await message.answer(
        "üìç –û—Ç–∫—É–¥–∞ –ø–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É?\n‚Äî –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=share_location_kb("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ¬´–û—Ç–∫—É–¥–∞¬ª"),
    )

@dp.message(OrderStates.waiting_from, F.location)
async def got_from_geo(message: Message, state: FSMContext):
    data = await state.get_data(); order = data.get("order", {})
    order["from_geo"] = {"lat": message.location.latitude, "lon": message.location.longitude}
    order["from_text"] = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    await state.update_data(order=order)
    await state.set_state(OrderStates.waiting_to)
    await message.answer(
        "üìç –ö—É–¥–∞ –µ–¥–µ–º? –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –∞–¥—Ä–µ—Å.",
        reply_markup=share_location_kb("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ¬´–ö—É–¥–∞¬ª"),
    )

@dp.message(OrderStates.waiting_from, F.text & (F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å"))
async def from_prompt_address(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=back_menu_kb())

@dp.message(OrderStates.waiting_from, F.text)
async def got_from_text(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await cmd_start(message, state); return
    data = await state.get_data(); order = data.get("order", {})
    order["from_text"] = message.text.strip()
    await state.update_data(order=order)
    await state.set_state(OrderStates.waiting_to)
    await message.answer(
        "üìç –ö—É–¥–∞ –µ–¥–µ–º? –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –∞–¥—Ä–µ—Å.",
        reply_markup=share_location_kb("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ¬´–ö—É–¥–∞¬ª"),
    )

@dp.message(OrderStates.waiting_to, F.location)
async def got_to_geo(message: Message, state: FSMContext):
    data = await state.get_data(); order = data.get("order", {})
    order["to_geo"] = {"lat": message.location.latitude, "lon": message.location.longitude}
    order["to_text"] = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    await state.update_data(order=order)

    if "from_geo" in order and "to_geo" in order:
        dist = haversine_km(order["from_geo"]["lat"], order["from_geo"]["lon"],
                            order["to_geo"]["lat"], order["to_geo"]["lon"])
        order["distance_km"] = max(dist, 0.5)
        await state.update_data(order=order)
        await state.set_state(OrderStates.choose_tariff)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_inline_kb())
        return

    await state.set_state(OrderStates.waiting_distance_km)
    await message.answer(
        "–ï—Å–ª–∏ –æ–±–µ –≥–µ–æ—Ç–æ—á–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî —É–∫–∞–∂–∏—Ç–µ *–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ* –≤ –∫–º (—á–∏—Å–ª–æ–º).",
        reply_markup=back_menu_kb(),
    )

@dp.message(OrderStates.waiting_to, F.text & (F.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å"))
async def to_prompt_address(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=back_menu_kb())

@dp.message(OrderStates.waiting_to, F.text)
async def got_to_text(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await cmd_start(message, state); return
    data = await state.get_data(); order = data.get("order", {})
    order["to_text"] = message.text.strip()
    await state.update_data(order=order)
    await state.set_state(OrderStates.waiting_distance_km)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ *–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ* –≤ –∫–º (—á–∏—Å–ª–æ–º), –Ω–∞–ø—Ä–∏–º–µ—Ä `7.5`.",
        reply_markup=back_menu_kb(),
    )

@dp.message(OrderStates.waiting_distance_km, F.text)
async def got_distance_text(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await cmd_start(message, state); return
    try:
        km = float(message.text.replace(",", "."))
        if km <= 0: raise ValueError
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ *—á–∏—Å–ª–æ–º*, –Ω–∞–ø—Ä–∏–º–µ—Ä: `6.2`")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["distance_km"] = km
    await state.update_data(order=order)
    await state.set_state(OrderStates.choose_tariff)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_inline_kb())

@dp.callback_query(F.data.startswith("tariff:"))
async def choose_tariff(cb: CallbackQuery, state: FSMContext):
    key = cb.data.split(":", 1)[1]
    if key not in TARIFFS:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True); return
    data = await state.get_data(); order = data.get("order", {})
    order["tariff"] = key

    dist = order.get("distance_km", 0.0)
    if dist <= 0:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", show_alert=True); return
    calc = estimate_price(dist, key)
    order["calc"] = calc
    await state.update_data(order=order)

    text = (
        f"üöï *–ü—Ä–µ–¥–∑–∞–∫–∞–∑*\n"
        f"–¢–∞—Ä–∏—Ñ: *{TARIFFS[key]['title']}*\n"
        f"–û—Ç–∫—É–¥–∞: {order.get('from_text', '‚Äî')}\n"
        f"–ö—É–¥–∞: {order.get('to_text', '‚Äî')}\n"
        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ~{calc['distance_km']} –∫–º\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: *~{calc['price']} ‚ÇΩ*\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
    )
    await cb.message.edit_text(text, parse_mode="Markdown")
    await cb.message.edit_reply_markup(reply_markup=confirm_inline_kb())
    await state.set_state(OrderStates.confirm)
    await cb.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_cb(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await cb.message.edit_reply_markup()
    await cb.message.answer("–í—ã –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await cb.answer()

@dp.callback_query(F.data.startswith("confirm:"))
async def confirm_order(cb: CallbackQuery, state: FSMContext):
    decision = cb.data.split(":", 1)[1]
    if decision == "no":
        await state.clear()
        await cb.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await cb.message.edit_reply_markup()
        await cb.message.answer("–í—ã –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        await cb.answer(); return

    data = await state.get_data(); order = data.get("order", {})
    order_text = fmt_order_summary(order)

    await cb.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°–ø–∞—Å–∏–±–æ üôå")
    await cb.message.edit_reply_markup()
    await cb.message.answer("–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –í—ã –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await state.clear()

    if ADMIN_CHAT_ID:
        try:
            user = cb.from_user
            header = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (id={user.id})"
            if user.username:
                header += f"\nUsername: @{user.username}"
            await bot.send_message(ADMIN_CHAT_ID, header + "\n\n" + order_text, parse_mode="Markdown")
        except Exception as e:
            logger.warning("Failed to notify admin: %s", e)

    await cb.answer("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# ================== FASTAPI + WEBHOOK ==================
app = FastAPI()

@app.get("/")
async def healthcheck():
    return {"status": "ok"}

@app.post(f"/webhook/{{secret}}")
async def telegram_webhook(secret: str, request: Request):
    if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

async def _set_webhook_with_retry():
    if not APP_BASE_URL:
        logger.warning("APP_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    url = f"{APP_BASE_URL}/webhook/{WEBHOOK_SECRET or ''}".rstrip("/")
    while True:
        try:
            await bot.set_my_commands([
                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
                BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            ])
            await bot.set_webhook(
                url=url,
                secret_token=WEBHOOK_SECRET if WEBHOOK_SECRET else None,
                drop_pending_updates=True,
            )
            logger.info("Webhook set to %s", url)
            break
        except Exception as e:
            logger.warning("Webhook not set yet (%s). Retrying soon‚Ä¶", e)
            await asyncio.sleep(30)

@app.on_event("startup")
async def on_startup():
    asyncio.create_task(_set_webhook_with_retry())
    logger.info("Startup complete. HTTP server is up; waiting for webhook setup‚Ä¶")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook(drop_pending_updates=False)
        logger.info("Webhook removed")
    except Exception as e:
        logger.warning("Failed to delete webhook: %s", e)
