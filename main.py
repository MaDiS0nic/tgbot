import os
import math
import asyncio
import logging
import re
import calendar as pycal
from datetime import date, timedelta
from typing import Final, Dict, Optional, Tuple, List

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Update, Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import aiohttp

# ================== CONFIG ==================
BOT_TOKEN: Final[str] = os.getenv("BOT_TOKEN", "")
APP_BASE_URL: Final[str] = os.getenv("APP_BASE_URL", "").rstrip("/")
WEBHOOK_SECRET: Final[str] = os.getenv("WEBHOOK_SECRET", "")

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "7039409310") or 7039409310)
DISPATCHER_PHONE = "+79340241414"
DISPATCHER_NAME = "–î–∏—Å–ø–µ—Ç—á–µ—Ä TransferAir"

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ================== LOGGING ==================
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger("tgbot")

# ================== AIOGRAM CORE ==================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================== –õ–ï–ô–ë–õ–´ –ö–ù–û–ü–û–ö ==================
BTN_CALC = "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
BTN_ORDER = "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
BTN_DISPATCHER = "‚òéÔ∏è –î–∏—Å–ø–µ—Ç—á–µ—Ä"
BTN_INFO = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

MENU_BUTTONS = [BTN_CALC, BTN_ORDER, BTN_DISPATCHER, BTN_INFO]

# ================== –¢–ê–†–ò–§–´ ==================
TARIFFS = {
    "econom":  {"title": "–õ–µ–≥–∫–æ–≤–æ–π",            "per_km": 30},
    "camry":   {"title": "Camry",               "per_km": 40},
    "minivan": {"title": "–ú–∏–Ω–∏–≤—ç–Ω (5-6 —á–µ–ª)",   "per_km": 50},
}

# ================== –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –¶–ï–ù–´ ==================
FIXED_PRICES: Dict[str, Tuple[int, int, int]] = {
    "–∂–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫": (800, 1500, 2000),
    "–ø—è—Ç–∏–≥–æ—Ä—Å–∫": (1200, 1500, 1900),
    "–µ—Å—Å–µ–Ω—Ç—É–∫–∏": (1300, 2000, 2500),
    "–∫–∏—Å–ª–æ–≤–æ–¥—Å–∫": (1800, 2500, 3000),

    "–∞—Ä—Ö—ã–∑": (6500, 8000, 10000),
    "–∞—Ä—Ö—ã–∑ —Ä–æ–º–∞–Ω—Ç–∏–∫": (7000, 9000, 11000),
    "–¥–æ–º–±–∞–π": (6500, 8000, 10000),
    "–∞–∑–∞—É": (5500, 7500, 9000),
    "—Ç–µ—Ä—Å–∫–æ–ª": (5500, 7500, 9000),
    "—ç–ª—å–±—Ä—É—Å": (5500, 7500, 9000),
    "—Ç–µ–±–µ—Ä–¥–∞": (5500, 7500, 9000),
    "–Ω–µ–π—Ç—Ä–∏–Ω–æ": (5000, 7500, 9000),
    "—Ç–µ–≥–µ–Ω–µ–∫–ª–∏": (5000, 7500, 9000),
    "–±–∞–π–¥–∞–µ–≤–æ": (5000, 7500, 9000),
    "—á–µ–≥–µ—Ç": (5500, 7500, 9000),

    "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å": (5400, 7200, 9000),
    "—á–µ—Ä–∫–µ—Å—Å–∫": (3000, 4000, 5000),
    "–Ω–∞–ª—å—á–∏–∫": (3300, 4400, 5500),
    "–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑": (6600, 8800, 11000),
    "–≥—Ä–æ–∑–Ω—ã–π": (9300, 12400, 15500),
    "–Ω–∞–∑—Ä–∞–Ω—å": (6600, 8800, 11000),
    "–º–∞–≥–∞—Å": (6600, 8800, 11000),

    "–∞–¥–ª–µ—Ä": (17400, 23200, 29000),
    "–∞–ª–∞–≥–∏—Ä": (6000, 8000, 10000),
    "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–æ–µ —Å–µ–ª–æ": (2100, 2800, 3500),
    "–∞—Ä–¥–æ–Ω": (5500, 7400, 9200),
    "–∞—Ä–∑–≥–∏—Ä": (6000, 8000, 10000),
    "–∞—Ä–º–∞–≤–∏—Ä": (5700, 7600, 9500),
    "–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å": (18900, 25000, 31500),
    "–∞—É—à–∏–≥–µ—Ä": (4000, 5400, 6700),
    "–∞—á–∏–∫—É–ª–∞–∫ —Å–µ–ª–æ": (5500, 7400, 9200),
    "–±–∞–∫—Å–∞–Ω": (2500, 3300, 4000),
    "–±–∞—Ç—É–º–∏": (30000, 40000, 50000),
    "–±–µ–ª–æ–º–µ—á–µ—Ç—Å–∫–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (3600, 4800, 6000),
    "–±–µ—Å–ª–∞–Ω": (6000, 8000, 10000),
    "–±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π": (4000, 5400, 6700),
    "–±—É–¥—ë–Ω–æ–≤—Å–∫": (4000, 5400, 6700),
    "–≤–∏—Ç—è–∑–µ–≤–æ –ø–æ—Å–µ–ª–æ–∫": (18000, 24000, 30000),
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": (18000, 24000, 30000),
    "–≥–∞–ª—é–≥–∞–µ–≤—Å–∫–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (6000, 8000, 10000),
    "–≥–µ–ª–µ–Ω–¥–∂–∏–∫": (18000, 24000, 30000),
    "–≥–µ–æ—Ä–≥–∏–µ–≤—Å–∫": (1300, 2000, 2500),
    "–≥–æ—Ä–Ω–æ–∑–∞–≤–æ–¥—Å–∫–æ–µ —Å–µ–ª–æ": (3000, 4000, 5000),
    "–≥—Ä—É—à–µ–≤—Å–∫–æ–µ —Å–µ–ª–æ": (3300, 4400, 5500),
    "–≥—É–¥–∞—É—Ä–∏": (15000, 20000, 25000),
    "–¥–µ—Ä–±–µ–Ω—Ç": (18000, 24000, 30000),
    "–¥–∂—É–±–≥–∞": (14000, 19000, 23000),
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": (72000, 96000, 120000),
    "–µ–ª–∏–∑–∞–≤–µ—Ç–∏–Ω—Å–∫–æ–µ —Å–µ–ª–æ": (3700, 5000, 6200),
    "–∑–µ–ª–µ–Ω–æ–∫—É–º—Å–∫": (2400, 3200, 4000),
    "–∑–µ–ª–µ–Ω—á—É–∫—Å–∫–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (5000, 7500, 8500),
    "–∑–æ–ª—å—Å–∫–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (1500, 2000, 2500),
    "–∏–∫–æ–Ω—Ö–∞–ª–∫": (3400, 4500, 5600),
    "–∫–∞–±–∞—Ä–¥–∏–Ω–∫–∞": (16500, 22000, 27500),
    "–∫–∞–º–∞—Ç–∞ —Å–µ–ª–æ (–æ—Å–µ—Ç–∏—è)": (6000, 8000, 10000),
    "–∫–∞—Ä—á–∞–µ–≤—Å–∫": (4600, 6100, 7700),
    "–∫–∞—Ä–∞—Ç—é–±–µ": (5400, 7200, 9000),
    "–∫–∞—Å–ø–∏–π—Å–∫": (14500, 19000, 24000),
    "–∫–∏–∑–ª—è—Ä": (11400, 15200, 19000),
    "–∫–æ—á—É–±–µ–µ–≤—Å–∫–æ–µ —Å–µ–ª–æ": (3700, 5000, 6200),
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": (12000, 16000, 20000),
    "–∫—É—Ä—Å–∫–∞—è": (4300, 5700, 7100),
    "–ª–∞–±–∏–Ω—Å–∫": (7000, 9300, 11600),
    "–ª–∞–∑–∞—Ä–µ–≤—Å–∫–æ–µ": (14500, 19200, 24000),
    "–ª–µ–≤–æ–∫—É–º—Å–∫–æ–µ —Å–µ–ª–æ": (5200, 7000, 8700),
    "–º–∞–π–∫–æ–ø": (8800, 11700, 14500),
    "–º–∞–π—Å–∫–∏–π –∫–±—Ä": (4300, 5700, 7000),
    "–º–∞—Ä—å–∏–Ω—Å–∫–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (2100, 2800, 3500),
    "–º–∞—Ö–∞—á–∫–∞–ª–∞": (13900, 18500, 23100),
    "–º–æ–∑–¥–æ–∫": (4900, 6500, 8100),
    "–Ω–∞—Ä—Ç–∫–∞–ª–∞": (3700, 5000, 6200),
    "–Ω–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫": (3000, 4000, 5000),
    "–Ω–µ–∑–ª–æ–±–Ω–∞—è —Å—Ç–∞–Ω–∏—Ü–∞": (1500, 2000, 2500),
    "–Ω–µ—Ñ—Ç–µ–∫—É–º—Å–∫": (6400, 8500, 10700),
    "–Ω–æ–≤–æ–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫": (7400, 9800, 12200),
    "–Ω–æ–≤–æ–ø–∞–≤–ª–æ–≤—Å–∫": (2500, 3400, 4200),
    "–Ω–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": (17000, 22600, 28200),
    "–Ω–æ–≤–æ—Å–µ–ª–∏—Ü–∫–æ–µ —Å–µ–ª–æ": (3000, 4000, 5000),
    "–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π": (3600, 4800, 6000),
    "–ø—Å–µ–±–∞–π": (9000, 12000, 15000),
    "–ø—Å—ã–≥–∞–Ω—Å—É —Å–µ–ª–æ": (3900, 5200, 6500),
    "—Ä–æ—Å—Ç–æ–≤- –Ω–∞- –¥–æ–Ω—É": (16000, 21000, 26000),
    "—Å–≤–µ—Ç–ª–æ–≥—Ä–∞–¥": (5100, 6800, 8500),
    "—Å–æ—á–∏": (16500, 22000, 27500),
    "—Å—Ç–µ–ø–∞–Ω—Ü–º–∏–Ω–¥–∞": (13000, 17000, 22000),
    "—Å—Ç–µ–ø–Ω–æ–µ —Å–µ–ª–æ": (4400, 5800, 7300),
    "—Å—É–Ω–∂–∞": (7500, 10000, 12500),
    "—Ç–±–∏–ª–∏—Å–∏": (20000, 25000, 30000),
    "—Ç–µ—Ä–µ–∫": (4700, 6200, 7800),
    "—Ç—É–∞–ø—Å–µ": (13000, 17300, 21700),
    "—É—Ä—É—Å-–º–∞—Ä—Ç–∞–Ω": (9000, 12000, 15000),
    "—É—á–∫—É–ª–∞–Ω –∞—É–ª": (6000, 8000, 10000),
    "—Ö–∞–¥—ã–∂–µ–Ω—Å–∫": (10700, 14200, 17800),
    "—Ö–∞—Å–∞–≤—é—Ä—Ç": (11400, 15200, 19000),
    "—Ö—É—Ä–∑—É–∫ –∞—É–ª": (6500, 9000, 11500),
    "—Ü–µ–π": (7300, 9700, 12000),
    "—ç–ª–∏—Å—Ç–∞": (9400, 12500, 15600),
}

# ================== –ê–õ–ò–ê–°–´/–°–ò–ù–û–ù–ò–ú–´ ==================
FROM_ALIASES = {
    "–º–∏–Ω–≤–æ–¥—ã": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–∞—ç—Ä–æ–ø–æ—Ä—Ç –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–∞—ç—Ä–æ–ø–æ—Ä—Ç –º–≤": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–∞—ç—Ä–æ–ø–æ—Ä—Ç mrv": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–º–≤": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "–º–≤—Ä": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
    "mrv": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã",
}
DEST_ALIASES = {
    "–∂–µ–ª–µ–∑–∫–∞": "–∂–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫",
    "–∂–≤": "–∂–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫",
    "–ø—è—Ç–∏–≥": "–ø—è—Ç–∏–≥–æ—Ä—Å–∫",
    "–µ—Å—Å—ã": "–µ—Å—Å–µ–Ω—Ç—É–∫–∏",
    "–∫–∏—Å–ª–æ–≤": "–∫–∏—Å–ª–æ–≤–æ–¥—Å–∫",
    "—Ä–æ–º–∞–Ω—Ç–∏–∫": "–∞—Ä—Ö—ã–∑ —Ä–æ–º–∞–Ω—Ç–∏–∫",
    "–∞—Ä—Ö—ã–∑-—Ä–æ–º–∞–Ω—Ç–∏–∫": "–∞—Ä—Ö—ã–∑ —Ä–æ–º–∞–Ω—Ç–∏–∫",
    "–ø—Ä–∏—ç–ª—å–±—Ä—É—Å—å–µ": "—ç–ª—å–±—Ä—É—Å",
    "–ø–æ–ª—è–Ω–∞ –∞–∑–∞—É": "–∞–∑–∞—É",
    "–º–∏—Ä –∞–∑–∞—É": "–∞–∑–∞—É",
    "—á–µ–≥–µ—Ç –ø–æ–ª—è–Ω–∞": "—á–µ–≥–µ—Ç",
    "—Å—Ç–∞–≤—Ä–∏–∫": "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
    "–≤–ª–∞–¥–∏–∫–∞–≤–∫": "–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑",
    "–≥—Ä–æ–∑": "–≥—Ä–æ–∑–Ω—ã–π",
    "–º–∞–≥": "–º–∞–≥–∞—Å",
    "–Ω–∞–ª—á–∏–∫": "–Ω–∞–ª—å—á–∏–∫",
    "—á–µ—Ä–µ–∫": "—á–µ—Ä–∫–µ—Å—Å–∫",
    "–∞–¥–ª": "–∞–¥–ª–µ—Ä",
    "—Å–æ—á–∏ –∞–¥–ª–µ—Ä": "–∞–¥–ª–µ—Ä",
    "–∫—Ä–¥": "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä",
    "–∫—Ä–¥–Ω": "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä",
}

def normalize_city(text: str) -> str:
    return " ".join((text or "").strip().split())

def _norm_key(text: str) -> str:
    return normalize_city(text).lower()

def resolve_from_city(text: str) -> str:
    key = _norm_key(text)
    return FROM_ALIASES.get(key, normalize_city(text))

def guess_from_display(text: str) -> str:
    key = _norm_key(text)
    if "–∞—ç—Ä–æ–ø–æ—Ä—Ç" in key or "mrv" in key:
        return "–ê—ç—Ä–æ–ø–æ—Ä—Ç MRV"
    if key in {"–∞—ç—Ä–æ–ø–æ—Ä—Ç mrv", "–∞—ç—Ä–æ–ø–æ—Ä—Ç –º–≤"}:
        return "–ê—ç—Ä–æ–ø–æ—Ä—Ç MRV"
    return "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"

def resolve_dest_key(text: str) -> str:
    key = _norm_key(text)
    if key in FIXED_PRICES:
        return key
    return DEST_ALIASES.get(key, key)

# ================== –ü–û–î–°–ö–ê–ó–ö–ò –ì–û–†–û–î–û–í ==================
DEST_OPTIONS: List[Tuple[str, str]] = [
    ("–ñ–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫", "–∂–µ–ª–µ–∑–Ω–æ–≤–æ–¥—Å–∫"),
    ("–ü—è—Ç–∏–≥–æ—Ä—Å–∫", "–ø—è—Ç–∏–≥–æ—Ä—Å–∫"),
    ("–ï—Å—Å–µ–Ω—Ç—É–∫–∏", "–µ—Å—Å–µ–Ω—Ç—É–∫–∏"),
    ("–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫", "–∫–∏—Å–ª–æ–≤–æ–¥—Å–∫"),
    ("–ê—Ä—Ö—ã–∑", "–∞—Ä—Ö—ã–∑"),
    ("–ê—Ä—Ö—ã–∑ –†–æ–º–∞–Ω—Ç–∏–∫", "–∞—Ä—Ö—ã–∑ —Ä–æ–º–∞–Ω—Ç–∏–∫"),
    ("–î–æ–º–±–∞–π", "–¥–æ–º–±–∞–π"),
    ("–ê–∑–∞—É", "–∞–∑–∞—É"),
    ("–¢–µ—Ä—Å–∫–æ–ª", "—Ç–µ—Ä—Å–∫–æ–ª"),
    ("–ß–µ–≥–µ—Ç", "—á–µ–≥–µ—Ç"),
    ("–≠–ª—å–±—Ä—É—Å", "—ç–ª—å–±—Ä—É—Å"),
    ("–¢–µ–±–µ—Ä–¥–∞", "—Ç–µ–±–µ—Ä–¥–∞"),
    ("–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å"),
    ("–ù–∞–ª—å—á–∏–∫", "–Ω–∞–ª—å—á–∏–∫"),
    ("–ß–µ—Ä–∫–µ—Å—Å–∫", "—á–µ—Ä–∫–µ—Å—Å–∫"),
    ("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", "–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑"),
    ("–ê–¥–ª–µ—Ä", "–∞–¥–ª–µ—Ä"),
    ("–°–æ—á–∏", "—Å–æ—á–∏"),
    ("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä"),
    ("–ì—Ä–æ–∑–Ω—ã–π", "–≥—Ä–æ–∑–Ω—ã–π"),
    ("–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–º–∞—Ö–∞—á–∫–∞–ª–∞"),
    ("–ë–µ—Å–ª–∞–Ω", "–±–µ—Å–ª–∞–Ω"),
    ("–ê–ª–∞–≥–∏—Ä", "–∞–ª–∞–≥–∏—Ä"),
    ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),
    ("–¢—É–∞–ø—Å–µ", "—Ç—É–∞–ø—Å–µ"),
    ("–ö–∞–±–∞—Ä–¥–∏–Ω–∫–∞", "–∫–∞–±–∞—Ä–¥–∏–Ω–∫–∞"),
    ("–õ–∞–∑–∞—Ä–µ–≤—Å–∫–æ–µ", "–ª–∞–∑–∞—Ä–µ–≤—Å–∫–æ–µ"),
    ("–ö–∞—Å–ø–∏–π—Å–∫", "–∫–∞—Å–ø–∏–π—Å–∫"),
    ("–ö–∏–∑–ª—è—Ä", "–∫–∏–∑–ª—è—Ä"),
    ("–î–µ—Ä–±–µ–Ω—Ç", "–¥–µ—Ä–±–µ–Ω—Ç"),
]

# ---- –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ callback'–∏ –¥–ª—è from_pick ----
FROM_CHOICES = {
    "mv":  ("–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"),
    "mrv": ("–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", "–ê—ç—Ä–æ–ø–æ—Ä—Ç MRV"),
}

def from_suggestions_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", callback_data="fp:mv"),
        InlineKeyboardButton(text="–ê—ç—Ä–æ–ø–æ—Ä—Ç MRV",    callback_data="fp:mrv"),
    ]])

def dest_suggestions_kb(page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    start = page * per_page
    items = DEST_OPTIONS[start:start + per_page]
    rows = []
    for i in range(0, len(items), 2):
        pair = items[i:i+2]
        row = []
        for disp, key in pair:
            row.append(InlineKeyboardButton(text=disp, callback_data=f"dest_pick:{key}"))
        rows.append(row)
    max_page = (len(DEST_OPTIONS) - 1) // per_page
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"dest_page:{page-1}"))
    if page < max_page:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚è≠Ô∏è", callback_data=f"dest_page:{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –ö–ê–õ–ï–ù–î–ê–†–¨ ==================
RU_MONTHS = [
    "", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

def date_calendar_kb(y: int, m: int) -> InlineKeyboardMarkup:
    pycal.setfirstweekday(pycal.MONDAY)
    month_cal = pycal.monthcalendar(y, m)
    header = [
        [InlineKeyboardButton(text=f"{RU_MONTHS[m]} {y}", callback_data="noop")],
        [
            InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="calpick:today"),
            InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="calpick:tomorrow"),
        ],
        [
            InlineKeyboardButton(text="–ü–Ω", callback_data="noop"),
            InlineKeyboardButton(text="–í—Ç", callback_data="noop"),
            InlineKeyboardButton(text="–°—Ä", callback_data="noop"),
            InlineKeyboardButton(text="–ß—Ç", callback_data="noop"),
            InlineKeyboardButton(text="–ü—Ç", callback_data="noop"),
            InlineKeyboardButton(text="–°–±", callback_data="noop"),
            InlineKeyboardButton(text="–í—Å", callback_data="noop"),
        ],
    ]
    rows = []
    for week in month_cal:
        row = []
        for d in week:
            if d == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="noop"))
            else:
                row.append(InlineKeyboardButton(text=str(d), callback_data=f"calpick:{y}:{m}:{d}"))
        rows.append(row)
    prev_y, prev_m = (y - 1, 12) if m == 1 else (y, m - 1)
    next_y, next_m = (y + 1, 1) if m == 12 else (y, m + 1)
    nav = [[
        InlineKeyboardButton(text="‚èÆÔ∏è", callback_data=f"calnav:{prev_y}:{prev_m}"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="calcancel"),
        InlineKeyboardButton(text="‚è≠Ô∏è", callback_data=f"calnav:{next_y}:{next_m}"),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=header + rows + nav)

# ================== –í–†–ï–ú–Ø ==================
def time_hours_kb() -> InlineKeyboardMarkup:
    rows = []
    for base in range(0, 24, 6):
        row = []
        for h in range(base, base + 6):
            row.append(InlineKeyboardButton(text=f"{h:02d}", callback_data=f"timeh:{h:02d}"))
        rows.append(row)
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="timecancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def time_minutes_kb(hour: str) -> InlineKeyboardMarkup:
    row = [
        InlineKeyboardButton(text="00", callback_data=f"timem:{hour}:00"),
        InlineKeyboardButton(text="15", callback_data=f"timem:{hour}:15"),
        InlineKeyboardButton(text="30", callback_data=f"timem:{hour}:30"),
        InlineKeyboardButton(text="45", callback_data=f"timem:{hour}:45"),
    ]
    ctrl = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ß–∞—Å—ã", callback_data="timeback"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="timecancel"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"–ß–∞—Å—ã: {hour}", callback_data="noop")], row, ctrl])

# ================== –ü–ê–°–°–ê–ñ–ò–†–´ ==================
def pax_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="1", callback_data="pax:1"),
            InlineKeyboardButton(text="2", callback_data="pax:2"),
            InlineKeyboardButton(text="3", callback_data="pax:3"),
        ],
        [
            InlineKeyboardButton(text="4", callback_data="pax:4"),
            InlineKeyboardButton(text="5", callback_data="pax:5"),
            InlineKeyboardButton(text="6", callback_data="pax:6"),
        ],
        [
            InlineKeyboardButton(text="7 –∏ –±–æ–ª–µ–µ", callback_data="pax:7+"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô? ==================
def comment_choice_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞", callback_data="comment_yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="comment_no"),
    ]])

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ==================
def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_CALC)],
            [KeyboardButton(text=BTN_ORDER)],
            [KeyboardButton(text=BTN_DISPATCHER)],
            [KeyboardButton(text=BTN_INFO)],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def dispatcher_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤ Telegram",
            url="https://t.me/zhelektown"
        )
    ], [
        InlineKeyboardButton(
            text="üì± –¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞",
            callback_data="dispatcher_phone"
        )
    ]])

def confirm_order_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="order_confirm"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="order_edit"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel"),
    ]])

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
class CalcStates(StatesGroup):
    from_city = State()
    to_city = State()

class OrderForm(StatesGroup):
    from_city = State()
    to_city = State()
    date = State()
    time = State()
    pax = State()
    comment_choice = State()
    phone = State()
    comment = State()
    confirm = State()

# ================== –•–ï–õ–ü–ï–†–´ (–≥–µ–æ/—Ü–µ–Ω—ã) ==================
def haversine_km(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    R = 6371.0
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlmb = math.radians(lon2 - lon1)
    a = math.sin(dphi/2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlmb/2) ** 2
    return R * (2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)))

async def geocode_city(session: aiohttp.ClientSession, city: str) -> Optional[Dict[str, float]]:
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": city, "format": "json", "limit": 1}
    headers = {"User-Agent": "TransferAir-KMV-Bot/1.0 (admin@example.com)"}
    try:
        async with session.get(url, params=params, headers=headers, timeout=20) as r:
            if r.status != 200:
                return None
            data = await r.json()
            if not data:
                return None
            return {"lat": float(data[0]["lat"]), "lon": float(data[0]["lon"])}
    except Exception as e:
        logger.warning(f"Geocode failed for {city}: {e}")
        return None

def prices_text_total_only(econom: int, camry: int, minivan: int) -> str:
    return (
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n"
        f"‚Ä¢ {TARIFFS['econom']['title']} ‚Äî ~{econom} ‚ÇΩ\n"
        f"‚Ä¢ {TARIFFS['camry']['title']} ‚Äî ~{camry} ‚ÇΩ\n"
        f"‚Ä¢ {TARIFFS['minivan']['title']} ‚Äî ~{minivan} ‚ÇΩ"
    )

def per_km_prices(distance_km: float) -> Tuple[int, int, int]:
    d = max(1.0, round(distance_km, 1))
    p_e = int(round(d * TARIFFS["econom"]["per_km"]))
    p_c = int(round(d * TARIFFS["camry"]["per_km"]))
    p_m = int(round(d * TARIFFS["minivan"]["per_km"]))
    return p_e, p_c, p_m

async def compute_prices_for_order(from_city: str, to_city: str) -> Optional[Tuple[int, int, int, str]]:
    from_key = _norm_key(from_city)
    to_key = resolve_dest_key(to_city)
    if from_key == "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã" and to_key in FIXED_PRICES:
        e, c, m = FIXED_PRICES[to_key]
        return e, c, m, "fixed"

    async with aiohttp.ClientSession() as session:
        a = await geocode_city(session, from_city)
        b = await geocode_city(session, to_city)
    if not a or not b:
        return None
    dist = haversine_km(a["lat"], a["lon"], b["lat"], b["lon"])
    e, c, m = per_km_prices(dist)
    return e, c, m, "distance"

PHONE_RE = re.compile(r"^\+?\d[\d\-\s]{8,}$")

# ================== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –†–û–£–¢–ï–† –ú–ï–ù–Æ ==================
@dp.message(F.text.in_(MENU_BUTTONS))
async def menu_router(message: Message, state: FSMContext):
    await state.clear()
    text = message.text

    if text == BTN_CALC:
        await state.set_state(CalcStates.from_city)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):", parse_mode="Markdown")
        await message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=from_suggestions_kb())
        return

    if text == BTN_ORDER:
        await state.set_state(OrderForm.from_city)
        await state.update_data(order={})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):", parse_mode="Markdown")
        await message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=from_suggestions_kb())
        return

    if text == BTN_DISPATCHER:
        info = (
            "‚òéÔ∏è *–°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤ Telegram\n"
            "–∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞."
        )
        await message.answer(info, parse_mode="Markdown", reply_markup=dispatcher_inline_kb())
        return

    if text == BTN_INFO:
        await message.answer(
            "üöï TransferAir –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–µ–µ —Ç–∞–∫—Å–∏ (–¢—Ä–∞–Ω—Å—Ñ–µ—Ä) –∏–∑ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –í–æ–¥.\n\n"
            "ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
            "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º: +79340241414\n\n"
            "üåê –ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç: https://transferkmw.ru/",
        )
        return

# ================== START ==================
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª. –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

# ---- –î–ò–°–ü–ï–¢–ß–ï–† ----
@dp.message(F.text == BTN_DISPATCHER)
async def on_dispatcher(message: Message):
    text = (
        "‚òéÔ∏è *–°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤ Telegram\n"
        "–∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞."
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=dispatcher_inline_kb())

@dp.callback_query(F.data == "dispatcher_phone")
async def dispatcher_phone_cb(cb: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º ‚Äî Telegram –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
    await cb.message.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {DISPATCHER_PHONE}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å.")
    await cb.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# ================== –ü–û–î–•–í–ê–¢ FROM/TO –ü–û–î–°–ö–ê–ó–û–ö ==================
@dp.callback_query(F.data.startswith("fp:"))
async def pick_from(cb: CallbackQuery, state: FSMContext):
    key = cb.data.split(":", 1)[1]  # mv | mrv
    canonical, display = FROM_CHOICES.get(key, ("–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã", "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"))

    current = await state.get_state()
    if current and current.endswith("from_city"):
        if current.startswith("CalcStates"):
            await state.update_data(from_city=canonical, from_display=display)
            await state.set_state(CalcStates.to_city)
            await cb.message.edit_text(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{display}* ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):",
                parse_mode="Markdown"
            )
            await cb.message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=dest_suggestions_kb(0))
        else:
            order = {"from_city": canonical, "from_display": display}
            await state.update_data(order=order)
            await state.set_state(OrderForm.to_city)
            await cb.message.edit_text(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{display}* ‚úÖ\n–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):",
                parse_mode="Markdown"
            )
            await cb.message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=dest_suggestions_kb(0))
    await cb.answer()

@dp.callback_query(F.data.startswith("dest_page:"))
async def dest_page(cb: CallbackQuery):
    page = int(cb.data.split(":", 1)[1])
    try:
        await cb.message.edit_reply_markup(reply_markup=dest_suggestions_kb(page))
    except Exception:
        await cb.message.answer("–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã:", reply_markup=dest_suggestions_kb(page))
    await cb.answer()

@dp.callback_query(F.data.startswith("dest_pick:"))
async def dest_pick(cb: CallbackQuery, state: FSMContext):
    key = cb.data.split(":", 1)[1]
    display_dest = next((d for d, k in DEST_OPTIONS if k == key), key.title())

    try:
        current = await state.get_state()
        if current and current.endswith("to_city"):
            # ---- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ----
            if current.startswith("CalcStates"):
                data = await state.get_data()
                from_city = data.get("from_city") or "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"
                from_display = data.get("from_display") or "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"
                await state.clear()

                if key in FIXED_PRICES and _norm_key(from_city) == "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã":
                    e, c, m = FIXED_PRICES[key]
                    txt = (
                        "‚ö†Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!*\n\n"
                        f"üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏*\n\n"
                        f"–ò–∑: *{from_display}*\n–í: *{display_dest}*\n\n"
                        f"{prices_text_total_only(e, c, m)}"
                    )
                    await cb.message.edit_text(txt, parse_mode="Markdown")
                    await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
                    await cb.answer()
                    return

                async with aiohttp.ClientSession() as session:
                    a = await geocode_city(session, from_city)
                    b = await geocode_city(session, display_dest)
                if not a or not b:
                    await cb.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    await cb.answer()
                    return
                dist = haversine_km(a["lat"], a["lon"], b["lat"], b["lon"])
                p_e, p_c, p_m = per_km_prices(dist)
                txt = (
                    "‚ö†Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!*\n\n"
                    f"üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏*\n\n"
                    f"–ò–∑: *{from_display}*\n–í: *{display_dest}*\n\n"
                    f"{prices_text_total_only(p_e, p_c, p_m)}"
                )
                await cb.message.edit_text(txt, parse_mode="Markdown")
                await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
                await cb.answer()
                return

            # ---- –ó–ê–ö–ê–ó ----
            else:
                data = await state.get_data()
                order = data.get("order", {})
                order["to_city"] = display_dest
                await state.update_data(order=order)
                await state.set_state(OrderForm.date)

                today = date.today()
                await cb.message.edit_text(
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{display_dest}* ‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ *–¥–∞—Ç—É –ø–æ–¥–∞—á–∏*:",
                    parse_mode="Markdown"
                )
                await cb.message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=date_calendar_kb(today.year, today.month))
        await cb.answer()
    except Exception as e:
        logger.exception(f"dest_pick handler failed: {e}")
        await cb.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await cb.answer()

# ---- –ö–ê–õ–ï–ù–î–ê–†–¨: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----
@dp.callback_query(F.data == "calcancel")
async def cal_cancel(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await cb.answer("–í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω")
    await bot.send_message(cb.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ *–¥–∞—Ç—É –ø–æ–¥–∞—á–∏*:", parse_mode="Markdown")
    await state.set_state(OrderForm.date)

@dp.callback_query(F.data.startswith("calnav:"))
async def cal_nav(cb: CallbackQuery):
    _, y, m = cb.data.split(":")
    y, m = int(y), int(m)
    try:
        await cb.message.edit_reply_markup(reply_markup=date_calendar_kb(y, m))
    except Exception:
        await cb.message.answer("–ö–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=date_calendar_kb(y, m))
    await cb.answer()

@dp.callback_query(F.data.startswith("calpick:"))
async def cal_pick(cb: CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")
    if parts[1] in ("today", "tomorrow"):
        d = date.today() if parts[1] == "today" else date.today() + timedelta(days=1)
    else:
        y, m, d_ = map(int, parts[1:4])
        d = date(y, m, d_)
    data = await state.get_data()
    order = data.get("order", {})
    order["date"] = d.strftime("%d.%m.%Y")
    await state.update_data(order=order)

    await cb.message.edit_text(f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: *{order['date']}* ‚úÖ", parse_mode="Markdown")
    await bot.send_message(cb.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ *–≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏* ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", parse_mode="Markdown", reply_markup=time_hours_kb())
    await state.set_state(OrderForm.time)
    await cb.answer("–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞")

# ---- –í–†–ï–ú–Ø: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----
@dp.callback_query(F.data == "timecancel")
async def time_cancel(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    await cb.answer("–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω—ë–Ω")
    await bot.send_message(cb.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ *–≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏* (—Å–Ω–∞—á–∞–ª–∞ —á–∞—Å):", parse_mode="Markdown", reply_markup=time_hours_kb())
    await state.set_state(OrderForm.time)

@dp.callback_query(F.data == "timeback")
async def time_back(cb: CallbackQuery, state: FSMContext):
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ *–≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏* ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", parse_mode="Markdown")
    except Exception:
        pass
    await cb.message.answer("–ß–∞—Å—ã:", reply_markup=time_hours_kb())
    await cb.answer()

@dp.callback_query(F.data.startswith("timeh:"))
async def time_pick_hour(cb: CallbackQuery, state: FSMContext):
    hour = cb.data.split(":", 1)[1]
    try:
        await cb.message.edit_text(f"–ß–∞—Å: *{hour}* ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:", parse_mode="Markdown")
    except Exception:
        pass
    await cb.message.answer("–ú–∏–Ω—É—Ç—ã:", reply_markup=time_minutes_kb(hour))
    await cb.answer()

@dp.callback_query(F.data.startswith("timem:"))
async def time_pick_minutes(cb: CallbackQuery, state: FSMContext):
    _, hour, minute = cb.data.split(":")
    tm = f"{hour}:{minute}"
    data = await state.get_data()
    order = data.get("order", {})
    order["time"] = tm
    await state.update_data(order=order)

    await cb.message.edit_text(f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: *{order['time']}* ‚úÖ", parse_mode="Markdown")
    await bot.send_message(cb.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫*:", parse_mode="Markdown", reply_markup=pax_kb())
    await state.set_state(OrderForm.pax)
    await cb.answer("–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ")

# ---- –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥) ----
async def geocode_pair(from_city: str, to_city: str) -> Optional[Tuple[Dict[str, float], Dict[str, float]]]:
    async with aiohttp.ClientSession() as session:
        a = await geocode_city(session, from_city)
        b = await geocode_city(session, to_city)
    if not a or not b:
        return None
    return a, b

@dp.message(CalcStates.from_city, F.text)
async def calc_from_city(message: Message, state: FSMContext):
    from_city_input = normalize_city(message.text)
    from_city_canon = resolve_from_city(from_city_input)
    from_display = guess_from_display(from_city_input) if _norm_key(from_city_canon) == "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã" else from_city_canon
    await state.update_data(from_city=from_city_canon, from_display=from_display)
    await state.set_state(CalcStates.to_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):", parse_mode="Markdown")
    await message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=dest_suggestions_kb(0))

@dp.message(CalcStates.to_city, F.text)
async def calc_to_city(message: Message, state: FSMContext):
    try:
        to_raw = normalize_city(message.text)
        data = await state.get_data()
        from_city = data.get("from_city") or "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"
        from_display = data.get("from_display") or "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã"

        to_key = resolve_dest_key(to_raw)

        if to_key in FIXED_PRICES and _norm_key(from_city) == "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã":
            e, c, m = FIXED_PRICES[to_key]
            txt = (
                "‚ö†Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!*\n\n"
                f"üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏*\n\n"
                f"–ò–∑: *{from_display}*\n–í: *{to_raw}*\n\n"
                f"{prices_text_total_only(e, c, m)}"
            )
            await message.answer(txt, parse_mode="Markdown", reply_markup=main_menu_kb())
            await state.clear()
            return

        pair = await geocode_pair(from_city, to_raw)
        if not pair:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        a, b = pair
        dist = haversine_km(a["lat"], a["lon"], b["lat"], b["lon"])
        p_e, p_c, p_m = per_km_prices(dist)

        txt = (
            "‚ö†Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!*\n\n"
            f"üßÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏*\n\n"
            f"–ò–∑: *{from_display}*\n–í: *{to_raw}*\n\n"
            f"{prices_text_total_only(p_e, p_c, p_m)}"
        )
        await message.answer(txt, parse_mode="Markdown", reply_markup=main_menu_kb())
        await state.clear()
    except Exception as e:
        logger.exception(f"calc_to_city failed: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_kb())
        await state.clear()

# ---- –°–î–ï–õ–ê–¢–¨ –ó–ê–ö–ê–ó ----
@dp.message(OrderForm.from_city, F.text)
async def order_from_city(message: Message, state: FSMContext):
    from_city_input = normalize_city(message.text)
    from_city_canon = resolve_from_city(from_city_input)
    from_display = guess_from_display(from_city_input) if _norm_key(from_city_canon) == "–º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–¥—ã" else from_city_canon
    order = {"from_city": from_city_canon, "from_display": from_display}
    await state.update_data(order=order)
    await state.set_state(OrderForm.to_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è* (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):", parse_mode="Markdown")
    await message.answer("–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=dest_suggestions_kb(0))

@dp.message(OrderForm.to_city, F.text)
async def order_to_city(message: Message, state: FSMContext):
    data = await state.get_data(); order = data.get("order", {})
    order["to_city"] = normalize_city(message.text)
    await state.update_data(order=order)
    await state.set_state(OrderForm.date)

    today = date.today()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ *–¥–∞—Ç—É –ø–æ–¥–∞—á–∏*:", parse_mode="Markdown", reply_markup=date_calendar_kb(today.year, today.month))

@dp.message(OrderForm.date, F.text)
async def order_date_text_fallback(message: Message, state: FSMContext):
    order = (await state.get_data()).get("order", {})
    order["date"] = normalize_city(message.text)
    await state.update_data(order=order)
    await state.set_state(OrderForm.time)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ *–≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏* ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", parse_mode="Markdown", reply_markup=time_hours_kb())

@dp.message(OrderForm.time, F.text)
async def order_time_text_fallback(message: Message, state: FSMContext):
    order = (await state.get_data()).get("order", {})
    order["time"] = normalize_city(message.text)
    await state.update_data(order=order)
    await state.set_state(OrderForm.pax)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫*:", parse_mode="Markdown", reply_markup=pax_kb())

@dp.callback_query(F.data.startswith("pax:"))
async def pax_pick(cb: CallbackQuery, state: FSMContext):
    value = cb.data.split(":", 1)[1]  # "1".."6" –∏–ª–∏ "7+"
    data = await state.get_data()
    order = data.get("order", {})
    order["pax"] = "7 –∏ –±–æ–ª–µ–µ" if value == "7+" else value
    await state.update_data(order=order)

    await cb.message.edit_text(f"–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: *{order['pax']}* ‚úÖ", parse_mode="Markdown")
    await bot.send_message(cb.message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?", reply_markup=comment_choice_kb())
    await state.set_state(OrderForm.comment_choice)
    await cb.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–æ")

@dp.message(OrderForm.pax, F.text)
async def pax_text_fallback(message: Message, state: FSMContext):
    raw = message.text.strip().lower()
    mapped = None
    if raw in {"1","2","3","4","5","6"}:
        mapped = raw
    elif raw in {"7","7+","7 –∏ –±–æ–ª–µ–µ","7 –∏–ª–∏ –±–æ–ª—å—à–µ","—Å–µ–º—å","—Å–µ–º—å –∏ –±–æ–ª–µ–µ"}:
        mapped = "7 –∏ –±–æ–ª–µ–µ"
    if mapped is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º 1‚Äì6, –ª–∏–±–æ ¬´7 –∏ –±–æ–ª–µ–µ¬ª.", reply_markup=pax_kb())
        return

    order = (await state.get_data()).get("order", {})
    order["pax"] = mapped
    await state.update_data(order=order)
    await state.set_state(OrderForm.comment_choice)
    await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?", reply_markup=comment_choice_kb())

# ---- –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô? –î–∞/–ù–µ—Ç ----
@dp.callback_query(F.data == "comment_yes")
async def comment_yes(cb: CallbackQuery, state: FSMContext):
    await cb.message.edit_text("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ ¬´-¬ª, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏):")
    await state.set_state(OrderForm.comment)
    await cb.answer()

@dp.callback_query(F.data == "comment_no")
async def comment_no(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data(); order = data.get("order", {})
    order["comment"] = ""
    await state.update_data(order=order)
    await cb.answer("–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    await bot.send_message(cb.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (+7 ...):", parse_mode="Markdown")
    await state.set_state(OrderForm.phone)

@dp.message(OrderForm.comment, F.text)
async def order_comment(message: Message, state: FSMContext):
    data = await state.get_data(); order = data.get("order", {})
    comment = message.text.strip()
    order["comment"] = "" if comment == "-" else comment
    await state.update_data(order=order)
    await state.set_state(OrderForm.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (+7 ...):", parse_mode="Markdown")

@dp.message(OrderForm.phone, F.text)
async def order_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_RE.match(phone):
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 999 123-45-67)")
        return
    data = await state.get_data(); order = data.get("order", {})
    order["phone"] = phone
    await state.update_data(order=order)

    prices = await compute_prices_for_order(order.get("from_city",""), order.get("to_city",""))
    if prices is None:
        price_block = "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å (—É—Ç–æ—á–Ω–∏—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä)."
    else:
        e, c, m, _ = prices
        price_block = prices_text_total_only(e, c, m)

    txt = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"–û—Ç–∫—É–¥–∞: *{order.get('from_display', order.get('from_city',''))}*\n"
        f"–ö—É–¥–∞: *{order.get('to_city','')}*\n"
        f"–î–∞—Ç–∞: *{order.get('date','')}*\n"
        f"–í—Ä–µ–º—è: *{order.get('time','')}*\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: *{order.get('pax','')}*\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: *{order.get('phone','')}*\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment') or '‚Äî'}\n\n"
        "‚ö†Ô∏è *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º!*\n\n"
        f"{price_block}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    )
    await state.set_state(OrderForm.confirm)
    await message.answer(txt, parse_mode="Markdown", reply_markup=confirm_order_kb())

@dp.callback_query(F.data.in_(["order_confirm", "order_edit", "order_cancel"]))
async def order_finish(cb: CallbackQuery, state: FSMContext):
    action = cb.data
    if action == "order_cancel":
        await state.clear()
        await cb.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await cb.answer()
        await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return
    if action == "order_edit":
        await state.clear()
        await cb.message.edit_text("–ò–∑–º–µ–Ω–∏–º –∑–∞–∫–∞–∑. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ):")
        await state.set_state(OrderForm.from_city)
        await bot.send_message(cb.message.chat.id, "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:", reply_markup=from_suggestions_kb())
        await cb.answer()
        return

    data = await state.get_data(); order = data.get("order", {})
    await state.clear()

    await cb.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä.")
    await bot.send_message(cb.message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    price_text = ""
    prices = await compute_prices_for_order(order.get("from_city",""), order.get("to_city",""))
    if prices is not None:
        e, c, m, _ = prices
        price_text = "\n\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ:\n" + prices_text_total_only(e, c, m)

    if ADMIN_CHAT_ID:
        try:
            user = cb.from_user
            txt = (
                f"üÜï *–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑*\n\n"
                f"–û—Ç: *{order.get('from_display', order.get('from_city',''))}* ‚Üí *{order.get('to_city','')}*\n"
                f"–î–∞—Ç–∞: *{order.get('date','')}*, –í—Ä–µ–º—è: *{order.get('time','')}*\n"
                f"–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: *{order.get('pax','')}*\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: *{order.get('phone','')}*\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.get('comment') or '‚Äî'}"
                f"{price_text}\n\n"
                f"üë§ {user.full_name} (id={user.id})"
            )
            await bot.send_message(ADMIN_CHAT_ID, txt, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"Failed to notify admin: {e}")

# ---- –ò–ù–§–û–†–ú–ê–¶–ò–Ø ----
@dp.message(F.text == BTN_INFO)
async def info_handler(message: Message):
    await message.answer(
        "üöï TransferAir –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–µ–µ —Ç–∞–∫—Å–∏ (–¢—Ä–∞–Ω—Å—Ñ–µ—Ä) –∏–∑ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –í–æ–¥.\n\n"
        "ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
        "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º: +79340241414\n\n"
        "üåê –ü–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç: https://transferkmw.ru",
    )

# ================== FASTAPI + WEBHOOK ==================
app = FastAPI()

@app.get("/")
async def healthcheck():
    return {"status": "ok"}

@app.post(f"/webhook/{{secret}}")
async def telegram_webhook(secret: str, request: Request):
    if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

async def _set_webhook_with_retry():
    if not APP_BASE_URL:
        logger.warning("APP_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    url = f"{APP_BASE_URL}/webhook/{WEBHOOK_SECRET or ''}".rstrip("/")
    while True:
        try:
            await bot.set_my_commands([BotCommand(command="start", description="–ó–∞–ø—É—Å–∫")])
            await bot.set_webhook(url=url, secret_token=WEBHOOK_SECRET or None, drop_pending_updates=True)
            logger.info("Webhook set to %s", url)
            break
        except Exception as e:
            logger.warning("Webhook not set yet (%s). Retrying soon‚Ä¶", e)
            await asyncio.sleep(30)

@app.on_event("startup")
async def on_startup():
    asyncio.create_task(_set_webhook_with_retry())
    logger.info("Startup complete. Waiting for webhook setup‚Ä¶")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook(drop_pending_updates=False)
        logger.info("Webhook removed")
    except Exception as e:
        logger.warning(f"Failed to delete webhook: {e}")
