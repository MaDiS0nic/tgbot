import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
import asyncio
import aiohttp
import os

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ .env
ADMIN_CHAT_ID = 7039409310      # —Ç–≤–æ–π Telegram ID

# —Ç–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "–õ–µ–≥–∫–æ–≤–æ–π": 30,
    "Camry": 40,
    "–ú–∏–Ω–∏–≤—ç–Ω": 50,
}

# –§–æ—Ç–æ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É)
PHOTO_URL = "https://i.imgur.com/1D0mI0Q.jpeg"

# ============ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ============
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ============
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ============ –ö–õ–ê–í–ò–ê–¢–£–†–´ ============
def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")],
            [KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="–î–∏—Å–ø–µ—Ç—á–µ—Ä")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
        selective=True,
    )


# ============ –°–¢–ê–†–¢ ============
@dp.message(CommandStart())
async def cmd_start(message: Message):
    caption = (
        "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n"
        "–≠—Ç–æ –±–æ—Ç –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–µ–≥–æ —Ç–∞–∫—Å–∏ <b>TransferAir</b> –ö–∞–≤–∫–∞–∑—Å–∫–∏–µ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    )

    try:
        await message.answer_photo(
            photo=PHOTO_URL,
            caption=caption,
            reply_markup=main_menu_kb(),
        )
    except Exception:
        await message.answer(caption, reply_markup=main_menu_kb())


# ============ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ============
@dp.message(F.text.lower() == "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def calc_start(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    await dp.storage.set_data(chat=message.chat.id, data={"step": "from"})


@dp.message()
async def handle_text(message: Message):
    data = await dp.storage.get_data(chat=message.chat.id)
    step = data.get("step")

    # –®–∞–≥ 1 ‚Äî –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if step == "from":
        await dp.storage.set_data(chat=message.chat.id, data={"from_city": message.text, "step": "to"})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:")

    # –®–∞–≥ 2 ‚Äî –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è
    elif step == "to":
        from_city = data.get("from_city")
        to_city = message.text
        await dp.storage.set_data(chat=message.chat.id, data={"step": None})

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—á–µ—Ä–µ–∑ OpenRouteService)
        try:
            distance_km = await get_distance(from_city, to_city)
        except Exception as e:
            logger.error(e)
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        text = f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É <b>{from_city}</b> –∏ <b>{to_city}</b> ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–æ {distance_km:.1f} –∫–º.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
        buttons = [
            [InlineKeyboardButton(text=f"{name} ({price} ‚ÇΩ/–∫–º)", callback_data=f"tariff:{name}:{distance_km}")]
            for name, price in TARIFFS.items()
        ]
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_kb())


@dp.callback_query(F.data.startswith("tariff:"))
async def calc_price(callback):
    _, name, distance = callback.data.split(":")
    price = TARIFFS[name] * float(distance)
    await callback.message.answer(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É <b>{name}</b>: <b>{price:.0f} ‚ÇΩ</b>.")
    await callback.answer()


# ============ API —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ============
async def get_distance(from_city, to_city):
    url = f"https://router.project-osrm.org/route/v1/driving/{from_city};{to_city}"
    params = {"overview": "false"}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data["routes"][0]["distance"] / 1000
            else:
                raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {response.status}")


# ============ –ó–ê–ö–ê–ó ============
@dp.message(F.text.lower() == "—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def order_start(message: Message):
    text = (
        "üöï –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n\n"
        "1Ô∏è‚É£ –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è\n"
        "3Ô∏è‚É£ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.10.2025)\n"
        "4Ô∏è‚É£ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
        "5Ô∏è‚É£ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "6Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    await message.answer(text)
    await dp.storage.set_data(chat=message.chat.id, data={"step": "order"})


@dp.message(F.text & (F.text.lower() != "—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"))
async def order_receive(message: Message):
    data = await dp.storage.get_data(chat=message.chat.id)
    if data.get("step") == "order":
        order_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}:\n\n"
            f"{message.text}"
        )
        await bot.send_message(ADMIN_CHAT_ID, order_text)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä!")
        await dp.storage.set_data(chat=message.chat.id, data={})


# ============ –î–ò–°–ü–ï–¢–ß–ï–† ============
@dp.message(F.text.lower() == "–¥–∏—Å–ø–µ—Ç—á–µ—Ä")
async def dispatcher_info(message: Message):
    phone_number = "+79340241414"
    text = (
        f"üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º:\n<b>{phone_number}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å."
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì≤ –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url=f"tel:{phone_number}"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/TransferAirBot"),
            ]
        ]
    )
    await message.answer(text, reply_markup=kb)


# ============ –ó–ê–ü–£–°–ö ============
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
